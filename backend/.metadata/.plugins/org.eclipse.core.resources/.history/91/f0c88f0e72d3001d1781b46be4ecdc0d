package com.api.bankxapp.service;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.api.bankxapp.dto.TransactionDTO;
import com.api.bankxapp.dto.TransactionDTO4BankZ;
import com.api.bankxapp.entity.Account;
import com.api.bankxapp.entity.Transaction;
import com.api.bankxapp.producer.RabbitMQProducer;
import com.api.bankxapp.repository.AccountRepository;
import com.api.bankxapp.repository.TransactionRepository;
import com.api.bankxapp.utilities.AccountType;
import com.api.bankxapp.utilities.TransactionType;

@Service
public class TransactionService {
	
	@Autowired
	private TransactionRepository transactionRepo;
	
	
	@Autowired
	private AccountRepository accountRepo;
	
	@Autowired
	private RabbitMQProducer producer;
	
	private boolean isTransferToDifferentAccount;
	
	public int createTransaction(TransactionDTO transactionDTO,int iAccountType) {
		System.out.println("bfr actid:::"+transactionDTO.getOrginalCustomerId());
		long customerId=0L;
		if (isTransferToDifferentAccount)
			customerId=transactionDTO.getCustomerId();
			else
				customerId=transactionDTO.getOrginalCustomerId();
		Account account=accountRepo.findByNativeSQL(customerId, iAccountType);
		if (account==null) {
			System.out.println("account is null");
			return -1;
		}	
		System.out.println("actid:::"+account.getAccountId());
		Transaction transaction=new Transaction(transactionDTO.getId(),
				transactionDTO.getTransactionName(),
				transactionDTO.getAmount(),
				transactionDTO.getTransactionType(),
				transactionDTO.getAccount_TransId()
				);
	
		transaction.setAccount_transId(account.getAccountId());
		transaction.setTransactionDate(new Date());
		transaction.setBankZ(transactionDTO.isBankZ());
		
		Transaction tran2=transactionRepo.save(transaction);
		if (tran2==null) {
			System.out.println("transaction not created");
			return -1;
		}
		if (transactionDTO.getTransactionType()==TransactionType.DEBIT)
		account.setBalance(account.getBalance()-transactionDTO.getAmount());
		else {
			if (iAccountType==AccountType.SAVING) {
				transaction.setTransactionName("Crediting Saving Account with 0.5% of CurrentBalance");
				long creditedAmt=(long)((account.getBalance()*0.5)/100);
				transaction.setAmount(creditedAmt);
				transactionRepo.save(transaction);
			}
			account.setBalance(account.getBalance()+transactionDTO.getAmount());
		}
		Account account2=accountRepo.save(account);
		if (account2==null) {
			System.out.println("actid not updated");
			return -1;
		}
		return 0;
		
	}
	
	public int transferToOtherAccount(TransactionDTO transactionDTO) {
		
		//get AccountCustId of debit account
		transactionDTO.setTransactionType(AccountType.Current);
		transactionDTO.setBankZ(false);
		transactionDTO.setTransactionType(TransactionType.DEBIT);
		int status=createTransaction(transactionDTO,AccountType.Current);
		
		if (status!=0)
			return -1;
		 producer.sendMessage("Current Account Debited with "+transactionDTO.getAmount());
		//debiting 0.05% of the transaction
		 TransactionDTO debitChargesDTO=transactionDTO;
		 debitChargesDTO.setTransactionName("Debiting 0.05% of transaction charges");
		
		long transactionCharges=(long)(debitChargesDTO.getAmount() - ((debitChargesDTO.getAmount()*0.05)/100));
		debitChargesDTO.setAmount(transactionCharges);
		status=createTransaction(debitChargesDTO,AccountType.Current);
		if (status!=0)
			return -1;
		producer.sendMessage("Current Account Debited with Transaction charges 0.05% "+transactionCharges);
		//get AccountCustId of credit account
		transactionDTO.setTransactionType(TransactionType.CREDIT);
		isTransferToDifferentAccount=true;
		status=createTransaction(transactionDTO,AccountType.Current);
		if (status!=0)
			return -1;
		producer.sendMessage("Current Account Credited with "+transactionDTO.getAmount());
		return 0;
		
		
		/*Account account=accountRepo.findByNativeSQL(transactionDTO.getOrginalCustomerId(), AccountType.Current);
		Transaction tran=new Transaction();
		tran.setAccount_transId(account.getAccountId());
		tran.setTransactionName(transactionDTO.getTransactionName());
		tran.setAmount(transactionDTO.getAmount());
		tran.setTransactionType(TransactionType.DEBIT);
		tran.setBankZ(false);
		transactionRepo.save(tran);*/
		
		 
		
		 
		/*tran.setTransactionName("Debiting 0.05% of transaction charges");
		long transactionCharges=(long)(transactionDTO.getAmount() - ((transactionDTO.getAmount()*0.05)/100));
		tran.setAmount(transactionCharges);
		transactionRepo.save(tran);
		producer.sendMessage("Current Account Debited with Transaction charges 0.05% "+transactionCharges);
		
		long curBalance=account.getBalance()-(transactionDTO.getAmount()+transactionCharges);
		account.setBalance(curBalance);
		accountRepo.save(account);*/
		
				
				/*System.out.println("custId::"+transactionDTO.getCustomerId());
				Account account1=accountRepo.findByNativeSQL(transactionDTO.getCustomerId(), AccountType.Current);
				Transaction tran1=new Transaction();
				tran1.setAccount_transId(account1.getAccountId());
				tran1.setTransactionName(transactionDTO.getTransactionName());
				tran1.setAmount(transactionDTO.getAmount());
				tran1.setTransactionType(TransactionType.CREDIT);
				tran1.setBankZ(false);
				transactionRepo.save(tran1);
				producer.sendMessage("Current Account Credited with "+transactionDTO.getAmount());
				account1.setBalance(account1.getBalance()+transactionDTO.getAmount());
				accountRepo.save(account1);*/
		
	}
	

public int transferToInternalAccount(TransactionDTO transactionDTO) {
		
		//get AccountCustId of debit account
		this.isTransferToDifferentAccount=false;
		
		int debitAccountType=AccountType.Current==transactionDTO.getTransferFrom()? AccountType.Current: AccountType.SAVING;
		String accountType= debitAccountType==0?"Current":"Saving";
		transactionDTO.setTransactionType(TransactionType.DEBIT);
		int status=createTransaction(transactionDTO,debitAccountType);
		System.out.println("debitAccountType"+debitAccountType);
		if (status!=0)
			return -1;
		producer.sendMessage(accountType+" Account Debited with "+transactionDTO.getAmount());
		
		//debiting 0.05% of the transaction
				TransactionDTO debitCharges=new TransactionDTO();
				debitCharges.setTransactionName("Debiting 0.05% of transaction charges");
				
				long transactionCharges=(long)(transactionDTO.getAmount() - ((transactionDTO.getAmount()*0.05)/100));
				debitCharges.setAmount(transactionCharges);
				debitCharges.setTransactionType(TransactionType.DEBIT);
				debitCharges.setOrginalCustomerId(transactionDTO.getOrginalCustomerId());
				status=createTransaction(debitCharges,debitAccountType);
				
				producer.sendMessage(accountType+" Account Debited with Transaction charges 0.05% "+transactionCharges);
				
				//get AccountCustId of credit account
				int creditAccountType=AccountType.Current==transactionDTO.getTransferTo()? AccountType.Current: AccountType.SAVING;
				accountType= creditAccountType==0?"Current":"Saving";
				transactionDTO.setTransactionType(TransactionType.CREDIT);
				status=createTransaction(transactionDTO,creditAccountType);
				if (status!=0)
					return -1;
				producer.sendMessage(accountType+" Account Credited with "+transactionDTO.getAmount());
				return 0;
		/*Account account=accountRepo.findByNativeSQL(transactionDTO.getOrginalCustomerId(), debitAccountType);
		Transaction tran=new Transaction();
		tran.setAccount_transId(account.getAccountId());
		tran.setTransactionName(transactionDTO.getTransactionName());
		tran.setAmount(transactionDTO.getAmount());
		tran.setTransactionType(TransactionType.DEBIT);
		tran.setBankZ(false);
		transactionRepo.save(tran);
		 producer.sendMessage(accountType+" Account Debited with "+transactionDTO.getAmount());*/
		 
		
		
		/*long curBalance=account.getBalance()-(transactionDTO.getAmount()+transactionCharges);
		account.setBalance(curBalance);
		accountRepo.save(account);*/
		
				
		
		/*		Account account1=accountRepo.findByNativeSQL(transactionDTO.getOrginalCustomerId(), creditAccountType);
				Transaction tran1=new Transaction();
				tran1.setAccount_transId(account1.getAccountId());
				tran1.setTransactionName(transactionDTO.getTransactionName());
				tran1.setAmount(transactionDTO.getAmount());
				tran1.setTransactionType(TransactionType.CREDIT);
				tran1.setBankZ(false);
				transactionRepo.save(tran1);
				producer.sendMessage(accountType+" Account Credited with "+transactionDTO.getAmount());
				long creditedAmt=0;		
		if (transactionDTO.getTransferTo()==AccountType.SAVING) {
			tran1.setTransactionName("Crediting Saving Account with 0.5% of CurrentBalance");
			creditedAmt=(long)((account1.getBalance()*0.5)/100);
			tran1.setAmount(creditedAmt);
			transactionRepo.save(tran1);
		}
		account1.setBalance(account1.getBalance()+transactionDTO.getAmount()+creditedAmt);
		accountRepo.save(account1);*/
		
		
	}


public List<TransactionDTO4BankZ> getTransactionsByBankZ4BankXOnCurrentDate(){
	
	LocalDate dt=LocalDate.now();
	System.out.println("date:::"+dt);
	ArrayList<Transaction> tranList=transactionRepo.findByNativeSQL(dt,true);
	
	List<TransactionDTO4BankZ> list= tranList.stream().map(tran->transformToBankZObj(tran)
		
	).collect(Collectors.toList());
	
	producer.sendNotification(list);
	 return list;
	
	
}

private TransactionDTO4BankZ transformToBankZObj(Transaction tran) {
	TransactionDTO4BankZ t1=new TransactionDTO4BankZ();
	t1.setId(tran.getId());
	t1.setAmount(tran.getAmount());
	t1.setTransactionName(tran.getTransactionName());
	t1.setTransactionType(tran.getTransactionType());
	t1.setTransactionDate(tran.getTransactionDate());
	
	long customerId=accountRepo.findById(tran.getAccount_transId()).get().getCust_Acc_Id();
	t1.setCustomerId(customerId);

	return t1;
}


}
